/**
 */
package net.thwack.apiblueprint.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.thwack.apiblueprint.model.util.APIBlueprintModelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class APIBlueprintModelItemProviderAdapterFactory extends
		APIBlueprintModelAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this
	 * adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by
	 * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public APIBlueprintModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.APIBlueprint} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected APIBlueprintItemProvider apiBlueprintItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.APIBlueprint}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAPIBlueprintAdapter() {
		if (apiBlueprintItemProvider == null) {
			apiBlueprintItemProvider = new APIBlueprintItemProvider(this);
		}

		return apiBlueprintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.NameValueType} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected NameValueTypeItemProvider nameValueTypeItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.NameValueType}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createNameValueTypeAdapter() {
		if (nameValueTypeItemProvider == null) {
			nameValueTypeItemProvider = new NameValueTypeItemProvider(this);
		}

		return nameValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.ResourceGroup} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ResourceGroupItemProvider resourceGroupItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.ResourceGroup}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createResourceGroupAdapter() {
		if (resourceGroupItemProvider == null) {
			resourceGroupItemProvider = new ResourceGroupItemProvider(this);
		}

		return resourceGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.Resource} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.Resource}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.Base} instances. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected BaseItemProvider baseItemProvider;

	/**
	 * This creates an adapter for a {@link net.thwack.apiblueprint.model.Base}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createBaseAdapter() {
		if (baseItemProvider == null) {
			baseItemProvider = new BaseItemProvider(this);
		}

		return baseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.Parameter} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.Parameter}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.Payload} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PayloadItemProvider payloadItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.Payload}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPayloadAdapter() {
		if (payloadItemProvider == null) {
			payloadItemProvider = new PayloadItemProvider(this);
		}

		return payloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link java.util.Map.Entry} instances. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected StringToParameterMapItemProvider stringToParameterMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStringToParameterMapAdapter() {
		if (stringToParameterMapItemProvider == null) {
			stringToParameterMapItemProvider = new StringToParameterMapItemProvider(
					this);
		}

		return stringToParameterMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.ResourceModel} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ResourceModelItemProvider resourceModelItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.ResourceModel}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createResourceModelAdapter() {
		if (resourceModelItemProvider == null) {
			resourceModelItemProvider = new ResourceModelItemProvider(this);
		}

		return resourceModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.Action} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.Action}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.Request} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected RequestItemProvider requestItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.Request}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createRequestAdapter() {
		if (requestItemProvider == null) {
			requestItemProvider = new RequestItemProvider(this);
		}

		return requestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.Response} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ResponseItemProvider responseItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.Response}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createResponseAdapter() {
		if (responseItemProvider == null) {
			responseItemProvider = new ResponseItemProvider(this);
		}

		return responseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link net.thwack.apiblueprint.model.TransactionExample} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TransactionExampleItemProvider transactionExampleItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link net.thwack.apiblueprint.model.TransactionExample}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTransactionExampleAdapter() {
		if (transactionExampleItemProvider == null) {
			transactionExampleItemProvider = new TransactionExampleItemProvider(
					this);
		}

		return transactionExampleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the
	 * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>)
					|| (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (apiBlueprintItemProvider != null)
			apiBlueprintItemProvider.dispose();
		if (nameValueTypeItemProvider != null)
			nameValueTypeItemProvider.dispose();
		if (resourceGroupItemProvider != null)
			resourceGroupItemProvider.dispose();
		if (resourceItemProvider != null)
			resourceItemProvider.dispose();
		if (baseItemProvider != null)
			baseItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (payloadItemProvider != null)
			payloadItemProvider.dispose();
		if (stringToParameterMapItemProvider != null)
			stringToParameterMapItemProvider.dispose();
		if (resourceModelItemProvider != null)
			resourceModelItemProvider.dispose();
		if (actionItemProvider != null)
			actionItemProvider.dispose();
		if (requestItemProvider != null)
			requestItemProvider.dispose();
		if (responseItemProvider != null)
			responseItemProvider.dispose();
		if (transactionExampleItemProvider != null)
			transactionExampleItemProvider.dispose();
	}

}
